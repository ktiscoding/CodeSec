import tensorflow as tf
from keras import layers
from keras import models
from keras import optimizers
from keras.preprocessing.image import ImageDataGenerator
from keras.preprocessing.image import img_to_array, load_img
from tensorflow.keras.layers import Conv2D, MaxPooling2D
from tensorflow.keras.optimizers import RMSprop
import sklearn
import pandas as pd

tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(200, 200, 3))
tf.keras.layers.MaxPooling2D(2, 2)

model = tf.keras.models.Sequential([
# This is the first convolution
tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(200, 200, 3)),
tf.keras.layers.MaxPooling2D(2, 2),
# The second convolution
tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
tf.keras.layers.MaxPooling2D(2,2),
# The third convolution
tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
tf.keras.layers.MaxPooling2D(2,2),
#flattening the layers and creating 1 output neuron
tf.keras.layers.Flatten(),
tf.keras.layers.Dense(512, activation='relu'),
tf.keras.layers.Dense(1, activation='sigmoid')])

dataset = pd.read_csv("test.csv", index_col=0)
target_data=dataset['y']
train_data=dataset-target_data

#trains the model with the dataset and calculates the accuracy
#it does this training for 15 epochs
model.compile(dataset,
optimizer=RMSprop(lr=0.001),
metrics='accuracy')
history = model.fit(train_data,
steps_per_epoch=8,
epochs=15,
verbose=1,
validation_data = target_data,
validation_steps=8)
model.evaluate(target_data)
